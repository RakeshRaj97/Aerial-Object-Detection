#!/usr/bin/env python
import copy
import logging
from PIL import Image
import torch
from torchvision import transforms as tf
import brambox as bb
import lightnet as ln

__all__ = ['VOCDataset']
log = logging.getLogger('lightnet.VOC.dataset')


def identify_file(img_id):
    return f'data/VOCdevkit/{img_id}.png'


class VOCDataset(ln.models.BramboxDataset):
    """ Pascal VOC dataset, with annotations generated by `brambox.io.parser.box.PandasParser`

    Args:
        anno_file (str or Path): Path to annotation file (must be parseable by PandasParser)
        params (lightnet.engine.HyperParameters): Hyperparameters for this data (See Note)
        augment (boolean): Whether to perform data augmentation
        kwargs (optional): extra keyword arguments to pass on to the `brambox.io.load()` function

    Note:
        The hyperparameters object should at least contain the following attributes:

        - params.input_dimension (tuple): tuple containing base (width,height) for the network
        - params.class_label_map (list): List of class_labels (can be **None**, but this might lead to undeterministic behaviour)
        - params.flip (float): chance to flip the image
        - params.jitter (float): jitter percentage
        - params.hue (float): Hue change percentage
        - params.saturation (float): Saturation change percentage
        - params.value (float): Value change percentage

        Optional:

        - params.filter_anno ('ignore', 'rm' or 'none'): How to filter ignored annotations; Default: **'none'**
    """
    def __init__(self, anno_file, params, augment, remove_empty_images=False, **kwargs):
        annos = bb.io.load('pandas', f'data/{anno_file}', **kwargs)
        if remove_empty_images:
            annos.image = annos.image.cat.remove_unused_categories()

        # Filter data
        self.filter = getattr(params, 'filter_anno', 'none')
        if self.filter == 'ignore':
            annos.loc[annos.difficult, 'ignore'] = True
        elif self.filter == 'rm':
            annos = annos[~annos.difficult]
        elif self.filter != 'none':
            log.error(f'filter ({self.filter}) is not one of [ignore, rm, none]. Choosing default "none" value')

        # Data transformation pipeline
        if augment:
            transform = ln.data.transform.Compose([
                lambda img: img.convert('RGB'),
                ln.data.transform.RandomHSV(params.hue, params.saturation, params.value),
                ln.data.transform.RandomJitter(params.jitter, fill_color=0),
                ln.data.transform.RandomFlip(params.flip),
                ln.data.transform.Letterbox(dataset=self, fill_color=0),
                ln.data.transform.FitAnno(),
                tf.ToTensor(),
            ])
        else:
            transform = ln.data.transform.Compose([
                lambda img: img.convert('RGB'),
                ln.data.transform.Letterbox(dataset=self, fill_color=0),
                ln.data.transform.FitAnno(),
                tf.ToTensor(),
            ])

        super().__init__(annos, params.input_dimension, params.class_label_map, identify_file, transform)


if __name__ == '__main__':
    raise RuntimeError('"./bin/dataset.py" is not supposed to be executed, it is meant to be included by the other scripts.')
